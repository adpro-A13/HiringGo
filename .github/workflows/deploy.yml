name: Debug Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  debug-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set image tag (commit SHA)
        id: vars
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Debug Deploy to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO_NAME }}:$IMAGE_TAG
            
            echo "=== DEBUGGING DEPLOYMENT ==="
            echo "Image: $IMAGE"
            
            # Stop and remove old container
            docker rm -f web_server || true
            
            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
            
            # Pull image
            docker pull $IMAGE
            
            # Run container
            echo "Starting container..."
            docker run -d --name=web_server -p 8080:8080 \
              -e DB_URL="${{ secrets.DB_URL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              $IMAGE
            
            # Wait a bit
            sleep 15
            
            echo "=== CONTAINER STATUS ==="
            docker ps -a | grep web_server || echo "No container found"
            
            echo "=== CONTAINER LOGS ==="
            docker logs web_server || echo "Cannot get logs"
            
            echo "=== PORT CHECK ==="
            netstat -tulpn | grep :8080 || echo "Port 8080 not listening"
            
            echo "=== PROCESS CHECK ==="
            docker exec web_server ps aux || echo "Cannot check processes"
            
            echo "=== CURL TESTS ==="
            # Test berbagai endpoint
            echo "Testing root endpoint:"
            curl -v http://localhost:8080/ || echo "Root endpoint failed"
            
            echo "Testing with timeout:"
            timeout 10 curl -f http://localhost:8080/ || echo "Timeout curl failed"
            
            echo "Testing from inside container:"
            docker exec web_server curl -f http://localhost:8080/ || echo "Internal curl failed"
            
            echo "Testing different endpoints:"
            curl -f http://localhost:8080/health || echo "/health endpoint failed"
            curl -f http://localhost:8080/api || echo "/api endpoint failed"
            curl -f http://localhost:8080/status || echo "/status endpoint failed"
            
            echo "=== NETWORK CHECK ==="
            docker exec web_server netstat -tulpn || echo "Cannot check container ports"
            
            echo "=== ENVIRONMENT CHECK ==="
            docker exec web_server env | grep -E "(DB_|JWT_)" || echo "Cannot check environment"
            
            echo "=== END DEBUG ==="